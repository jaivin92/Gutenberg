
name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Upload html test report
        uses: actions/upload-artifact@v2
        with:
          name: lint.html
          path: app/build/reports/lint-results-debug.html

  unit-test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run tests
        run: ./gradlew test

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: unit_test_report
          path: app/build/reports/tests/testDebugUnitTest/

  instrumentation-test:
    needs: [unit-test]
    runs-on: macos-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run espresso tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected/

  static-code-analysis:
    needs: [instrumentation-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: SonarCloud Scan
        run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package:
    needs: [static-code-analysis]
    name: Generate APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: expense-manager.apk
          path: app/build/outputs/apk/debug/app-debug.apk



# name: Push

# on:
#   push:
#     branches: [ "develop", "master" ]
#   workflow_dispatch:

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#         - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#         - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
#         - run: echo "This job is running on a ${{ runner.os }} server hosted by GitHub!"
#     - uses: actions/
#     - run: echo "The ${{ github.repository }} repository has been cloned."
#     - run: echo "Setting up JDK" 
#     - name: set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: 'temurin'
#         cache: gradle
#     - run: echo "The workflow is now ready to test your code."
#     - name: Grant execute permission for gradlew
#       run: chmod +x gradlew
#     - run: echo "Building Debug APK."  
#     - name: Build with Gradle
#       run: ./gradlew build
#     - run: echo "Build status report=${{ job.status }}."


# jobs:
#   release:
#    name: Release App Bundle
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download AAB from build
#        uses: actions/download-artifact@v1
#        with:
#          name: aab
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: Tag Name
#          release_name: Release Name
#      - name: Upload Release AAB
#        id: upload_release_asset
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: aab/app-release.aab
#          asset_name: ${{ github.event.repository.name }}.aab
#          asset_content_type: application/zip
#      - run: echo "Upload returned with status=${{ job.status }}."
